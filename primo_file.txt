4. Cos'è Una classe? A che serve il self?
Una classe è una "fabbrica di oggetti" e in se rappresenta l'implementazione concreta del principio di incapsulamento dell'OOP. Infatti le classi in python hanno incapsulati dati (chiamati attributi) e funzioni (chiamate metodi) che permettono di accedere ai dati incapsulati. Grazie alla keyword "class" prima del nome della classe è possibile definirne una, mentre per istanziarla, e creare così un oggetto, basta richiamare il nome della classe con in essa (eventualmente) gli attributi che costituiscono l'oggetto. il self serve a richiamare i parametri di una classe, mentre il costruttore __init__() si occupa di costruirla.

6.Cos'è una collezione/aggregazione? Quali sono quelle che conosci? come si differenziano?
Una collezione o aggregazione in python è una data structure. Ne esistono di 4 tipi: ordinate e non ordinate (hanno o meno degli elementi indicizzati e ordinati), modofocabli e non modificabili (è possibili modificarle tramite metodi incorporati). Le liste sono strutture dati modificabili ed ordinate, le tuple sono non modificabili e ordinate, le dict sono modificabili e non ordinate, i set sono modificabili e non ordinati.

14.Cosa sono le funzioni ? Perché incarnano passivamente il concetto di astrazione? Cos'è l'astrazione nella programmazione ?
Le funzioni sono blocchi eseguibili di codice eseguibili attraverso un solo richiamo. Infatti esse incarnano il concetto di astrazione dato che possono orchestrare dietro un solo richiamo interi blocchi di codice (quello che viene il corpo della funzione). In pogrammazione l'Astrazione fa riferimento alla capacità di un elemento di fare da interfaccia a gruppi di altri elementi, il principio è lo stesso di una black box di cui ci interessa sapere input ed output ma non il contenuto effettivo della scatola.

16.Cos'è il concetto di controllo di flusso? Quali famiglie ne fanno parte? Spiega gli elementi di queste famiglie teoricamente 
Il concetto di controllo di flusso fa riferimento alla capacità di un linguaggio di programmazione di implementare delle keyword in grado, a seconda della stato True/False o 0/1 di una condizione da verificare, di eseguire blocchi di codice (funziona esattamente come un sistema di semafori). Esistono due famiglie di control flow: quelli ciclici come il for loop ed il while loop; e quelli condizionali come if-elif-else. Dei primi il for loop esegue un blocco di codice finchè è vera una condizione di iterazione di un elemento in una sequenza (aggregazione di elementi), il while loop è eseguito finchè un counter viene raggiunto oppure finche l'utente non chiude il ciclo. Infine if-elif-else sono eseguiti nel seguente ordine: if è il primo (obbligatorio), elif se è inserito (non obbligatorio) subito dopo if, alla fine è eseguito il blocco di else (obbligatorio).
